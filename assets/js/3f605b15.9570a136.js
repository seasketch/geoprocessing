"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[95705],{57516:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var r=n(74848),o=n(28453);const t={},i="getArea()",c={id:"api/geoprocessing/functions/getArea",title:"getArea()",description:"Returns area of valid cells (not nodata) overlapping with feature.  If no valid cells found, returns 0.",source:"@site/docs/api/geoprocessing/functions/getArea.md",sourceDirName:"api/geoprocessing/functions",slug:"/api/geoprocessing/functions/getArea",permalink:"/geoprocessing/docs/next/api/geoprocessing/functions/getArea",draft:!1,unlisted:!1,editUrl:"https://github.com/seasketch/geoprocessing/tree/main/website/templates/shared/docs/api/geoprocessing/functions/getArea.md",tags:[],version:"current",frontMatter:{}},a={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"getarea",children:"getArea()"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"function getArea(raster, feat?): Promise<number>\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns area of valid cells (not nodata) overlapping with feature.  If no valid cells found, returns 0."}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Parameter"}),(0,r.jsx)(s.th,{children:"Type"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"raster"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Georaster"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"feat"}),"?"]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/FeatureCollection",children:(0,r.jsx)(s.code,{children:"FeatureCollection"})}),"<",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/Polygon",children:(0,r.jsx)(s.code,{children:"Polygon"})})," | ",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/MultiPolygon",children:(0,r.jsx)(s.code,{children:"MultiPolygon"})}),", ",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/type-aliases/GeoJsonProperties",children:(0,r.jsx)(s.code,{children:"GeoJsonProperties"})}),"> | ",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/Feature",children:(0,r.jsx)(s.code,{children:"Feature"})}),"<",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/Polygon",children:(0,r.jsx)(s.code,{children:"Polygon"})})," | ",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/MultiPolygon",children:(0,r.jsx)(s.code,{children:"MultiPolygon"})}),", ",(0,r.jsx)(s.a,{href:"/geoprocessing/docs/next/api/geoprocessing/type-aliases/GeoJsonProperties",children:(0,r.jsx)(s.code,{children:"GeoJsonProperties"})}),">"]})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"Promise"}),"<",(0,r.jsx)(s.code,{children:"number"}),">"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(96540);const o={},t=r.createContext(o);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);