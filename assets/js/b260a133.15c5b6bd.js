"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37041],{74833:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=s(74848),i=s(28453);const o={slug:"/contributing"},r="Contributing",a={id:"Contributing",title:"Contributing",description:"Common commands",source:"@site/docs/Contributing.md",sourceDirName:".",slug:"/contributing",permalink:"/geoprocessing/docs/next/contributing",draft:!1,unlisted:!1,editUrl:"https://github.com/seasketch/geoprocessing/tree/main/website/templates/shared/docs/Contributing.md",tags:[],version:"current",frontMatter:{slug:"/contributing"},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/geoprocessing/docs/next/testing"}},l={},c=[{value:"Common commands",id:"common-commands",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Core library setup",id:"core-library-setup",level:2},{value:"Make code changes",id:"make-code-changes",level:2},{value:"Internationalization (i18n)",id:"internationalization-i18n",level:2},{value:"Testing",id:"testing",level:2},{value:"Matching test",id:"matching-test",level:3},{value:"E2E test data on port 8001",id:"e2e-test-data-on-port-8001",level:2},{value:"E2E test data on port 8080",id:"e2e-test-data-on-port-8080",level:2},{value:"Geoprocessing project test data on port 8080",id:"geoprocessing-project-test-data-on-port-8080",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Debugging Functions",id:"debugging-functions",level:3},{value:"Storybook components",id:"storybook-components",level:2},{value:"Make and Test Modifications",id:"make-and-test-modifications",level:2},{value:"Init example project",id:"init-example-project",level:3},{value:"Testing CLI commands",id:"testing-cli-commands",level:4},{value:"Testing Report Clients",id:"testing-report-clients",level:4},{value:"Running local client dev server",id:"running-local-client-dev-server",level:3},{value:"Test local gp project against local geoprocessing",id:"test-local-gp-project-against-local-geoprocessing",level:3},{value:"Publishing",id:"publishing",level:2},{value:"Alpha and Beta Canary Releases",id:"alpha-and-beta-canary-releases",level:2},{value:"Experimental Releases",id:"experimental-releases",level:2},{value:"Project init with non-latest version",id:"project-init-with-non-latest-version",level:2},{value:"Wiki",id:"wiki",level:2},{value:"i18n",id:"i18n",level:2},{value:"i18n namespaces",id:"i18n-namespaces",level:3},{value:"Adding new languages",id:"adding-new-languages",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Creating core translations",id:"creating-core-translations",level:3},{value:"Creating gp project translations",id:"creating-gp-project-translations",level:3},{value:"Loading project translations",id:"loading-project-translations",level:3},{value:"Questions",id:"questions",level:3},{value:"Problems",id:"problems",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"contributing",children:"Contributing"})}),"\n",(0,t.jsx)(n.h2,{id:"common-commands",children:"Common commands"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm install"})," - installs dependencies and runs postinstall scripts for all packages using ",(0,t.jsx)(n.code,{children:"lerna bootstrap"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm test"})," - runs test suite for all packages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm run clean"})," - clean up build artifacts by recursively removing files and directories not under version control including git ignored files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm run storybook"})," - start the storybook server and opn UI component library in your browser. Auto-refreshes on update.\n...and many more listed below"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['The geoprocessing code repository is setup as a "monorepo" managed by ',(0,t.jsx)(n.a,{href:"https://github.com/lerna/lerna",children:"Lerna"}),". It contains multiple ",(0,t.jsx)(n.code,{children:"packages"})," including the core ",(0,t.jsx)(n.code,{children:"geoprocessing"})," library, and then multiple user-installable ",(0,t.jsx)(n.code,{children:"templates"}),". These templates are bundled into the core library at build time."]}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsxs)(n.p,{children:["documentation is maintained in the ",(0,t.jsx)(n.a,{href:"https://github.com/seasketch/geoprocessing/wiki",children:"wiki"}),". You can edit the wiki using the Github web editor, or edit it locally and commit changes."]}),"\n",(0,t.jsxs)(n.p,{children:["VSCode provides excellent features for ",(0,t.jsx)(n.a,{href:"https://code.visualstudio.com/docs/languages/markdown#_editing-markdown",children:"editing markdown"})," as well as ",(0,t.jsx)(n.a,{href:"https://code.visualstudio.com/docs/languages/markdown#_markdown-preview",children:"previewing"})," and is highly recommended for all but small changes."]}),"\n",(0,t.jsx)(n.h2,{id:"core-library-setup",children:"Core library setup"}),"\n",(0,t.jsxs)(n.p,{children:["To contribute to the library, you'll need to set it up on your local system. First, follow the base ",(0,t.jsx)(n.a,{href:"/geoprocessing/docs/next/tutorials#initial-system-setup",children:"setup tutorial"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Then checkout the repo and run the install script. This will install lerna, bootstrap each package, and prepare an initial build of the geoprocessing library."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/seasketch/geoprocessing.git\ncd geoprocessing\nnpm install\n"})}),"\n",(0,t.jsx)(n.p,{children:"You should now be able to run tests for all packages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm run test\n"})}),"\n",(0,t.jsx)(n.h2,{id:"make-code-changes",children:"Make code changes"}),"\n",(0,t.jsxs)(n.p,{children:["Any changes you make to the Typescript code in ",(0,t.jsx)(n.code,{children:"src"})," won't be reflected in the Javascript code in ",(0,t.jsx)(n.code,{children:"dist"})," until you compile it. You can do this a few different ways. Watch modes are useful for active development, new changes will be compiled automatically as you go."]}),"\n",(0,t.jsx)(n.p,{children:"VS Code - Press Command+Shift+B to open the build menu"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"geoprocessing build"})," - build core library"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"geoprocessing build scripts"})," - build scripts only"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"geoprocessing watch"})," - build core library and watch for changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"geoprocessing watch scripts"})," - build scripts only and watch for changes"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"CLI - from packages/geoprocessing folder"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm run prepare"})," - compile core Typescript library and scripts using ",(0,t.jsx)(n.code,{children:"tsc"}),". Also runs automatically on initial install and publish"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm run watch"})," - build core library and watch for changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"npm run watch:scripts"})," - build scripts only and watch for changes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"internationalization-i18n",children:"Internationalization (i18n)"}),"\n",(0,t.jsxs)(n.p,{children:["The geoprocessign framework implements the ",(0,t.jsx)(n.a,{href:"/geoprocessing/docs/next/gip/GIP-1-i18n",children:"GIP-1"})," proposal for language translation, and uses POEditor as its third-party service for translators to provide translations."]}),"\n",(0,t.jsxs)(n.p,{children:["The language translation ",(0,t.jsx)(n.a,{href:"/geoprocessing/docs/next/tutorials",children:"tutorial"})," contains a lot of useful information on workflow. Managing translations internally for the library is very similar with some differences."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"translation:extract"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Extracts all translations from the geoprocessing package and all template packages using babel and ",(0,t.jsx)(n.a,{href:"https://github.com/gilbsgilbs/babel-plugin-i18next-extract",children:"babel-plugin-i18next-extract"})," to ",(0,t.jsx)(n.code,{children:"packages/geoprocessing/src/i18n"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"translation:publish"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Posts translations for all langauges to POEditor. Behavior is pre-configured via ",(0,t.jsx)(n.code,{children:"src/i18n/config.ts"}),". Do not edit this file unless you need to."]}),"\n",(0,t.jsxs)(n.li,{children:["Translations with namespace specified by ",(0,t.jsx)(n.code,{children:"localNamespace"})," are written to POEditor with context value of ",(0,t.jsx)(n.code,{children:"base"})," (context specified by ",(0,t.jsx)(n.code,{children:"remotextContex"})," property in ",(0,t.jsx)(n.code,{children:"src/i18n/config.son"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"All english translations are published, overwriting any in POEditor, since the code is their source of truth."}),"\n",(0,t.jsx)(n.li,{children:"For non-english languages, POEditor is the source of truth, so if a translation is not defined in POEditor, then a local translation is published if available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"translation:import"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Fetches translations from POEditor for all non-english languages having ",(0,t.jsx)(n.code,{children:"base"})," context value (context specified by ",(0,t.jsx)(n.code,{children:"remotextContex"})," property in ",(0,t.jsx)(n.code,{children:"src/i18n/config.son"}),"). Any existing translation values will be overwritten. Translations are saved to the default ",(0,t.jsx)(n.code,{children:"translation"})," namespace (as specified by the ",(0,t.jsx)(n.code,{children:"localNamespace"})," property in ",(0,t.jsx)(n.code,{children:"project/i18n.json"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"translation:sync"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A convenience command to keep the code, local translations, and remote translations in sync. Simply runs in succession ",(0,t.jsx)(n.code,{children:"extract"}),", ",(0,t.jsx)(n.code,{children:"publish"}),", then ",(0,t.jsx)(n.code,{children:"import"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.p,{children:"Within the geoprocessing package, there are numerous test commands that run different groups of tests. Some of these test commands start an accompanying web server on port 8080 automatically, and some require that you do that on your own before running the test command."}),"\n",(0,t.jsx)(n.p,{children:"Test groups:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"unit"}),": bite size tests for a specific function or small component of the system."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"e2e"}),": end-to-end tests that test larger parts of the system. May make network calls, make system calls, or expect a web server on a specific port. These tests may take longer, or only run locally, and therefore are often excluded by a test command, or not run in CI. Be aware of this and have a regiment of running e2e tests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"smoke"}),": tests that make sure a functions/components main functionality is working (e.g. reference to hardware that doesn't smoke when you turn it on). The core geoprocessing library doesn't really have tests with this group name but it could, opting to just call them unit tests, but in project-space, every geoprocessing function has an accompanying smoke test, and suite of sketches for running against to verify successful output."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If your test is a unit test, then name it with the ",(0,t.jsx)(n.code,{children:".test.ts"})," extension like ",(0,t.jsx)(n.code,{children:"myModule.test.ts"}),". If your test is an end-to-end test, meaning it makes network calls, requires a test data server to be running, or is a higher-level test of many lower-level modules, then name it with the ",(0,t.jsx)(n.code,{children:".e2e.test.ts"})," extension like ",(0,t.jsx)(n.code,{children:"myModule.e2e.test.ts"}),". All of these tests will run in a ",(0,t.jsx)(n.code,{children:"node"})," environment."]}),"\n",(0,t.jsxs)(n.p,{children:["If you are writing test for UI component or hooks, then put your test in the ",(0,t.jsx)(n.code,{children:"src/components"})," or ",(0,t.jsx)(n.code,{children:"src/hooks"})," directory and use the ",(0,t.jsx)(n.code,{children:"myModule.test.ts"})," extension. Tests in these folders will be run in a ",(0,t.jsx)(n.code,{children:"jsdom"})," environment."]}),"\n",(0,t.jsx)(n.p,{children:"Rundown of the various test commands. These are really just shortcuts to running jest commands."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"command"}),(0,t.jsx)(n.th,{children:"description"}),(0,t.jsx)(n.th,{children:"test groups run"}),(0,t.jsx)(n.th,{children:"auto-starts web server"}),(0,t.jsx)(n.th,{children:"accepts matcher string/regex"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"test"}),(0,t.jsx)(n.td,{children:"run unit tests. Used by Github CI"}),(0,t.jsx)(n.td,{children:"unit"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test",":matching"]}),(0,t.jsx)(n.td,{children:"run unit tests"}),(0,t.jsx)(n.td,{children:"unit"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test",":e2e"]}),(0,t.jsx)(n.td,{children:"run e2e tests"}),(0,t.jsx)(n.td,{children:"e2e"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test",":local"]}),(0,t.jsx)(n.td,{children:"run all tests"}),(0,t.jsx)(n.td,{children:"unit, e2e"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test",":scripts"]}),(0,t.jsx)(n.td,{children:"run unit tests in scripts folder"}),(0,t.jsx)(n.td,{children:"unit"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test:scripts",":matching"]}),(0,t.jsx)(n.td,{children:"run unit tests in scripts folder"}),(0,t.jsx)(n.td,{children:"unit"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test:scripts",":e2e"]}),(0,t.jsx)(n.td,{children:"run e2e tests"}),(0,t.jsx)(n.td,{children:"e2e"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test:scripts",":local"]}),(0,t.jsx)(n.td,{children:"run all tests in scripts folder"}),(0,t.jsx)(n.td,{children:"unit, e2e"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["test:scripts:local",":matching"]}),(0,t.jsx)(n.td,{children:"run all tests in scripts folder"}),(0,t.jsx)(n.td,{children:"unit, e2e"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"yes"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"matching-test",children:"Matching test"}),"\n",(0,t.jsx)(n.p,{children:"For example a matching test command to run a specific test or set of tests could be as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'npm run test:matching keyBy\nor\nnpm run test:scripts:local:matching importVectorDatasource\nor with a regular expression\nnpm run test:scripts:local:matching "/import*Datasource/"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["See Jest docs for more info. The command will match on the name you give within a test() call so choose your name to be unique enough to select the tests you want. Note that matching tests are run one at a time in order (aka ",(0,t.jsx)(n.code,{children:"runInBand"})," for Jest) so that you get consistent output that you can debug"]}),"\n",(0,t.jsx)(n.h2,{id:"e2e-test-data-on-port-8001",children:"E2E test data on port 8001"}),"\n",(0,t.jsxs)(n.p,{children:["Jest starts a web server on localhost port 8001 (see geoprocessing/scripts/jest.config.ts) that serves up the ",(0,t.jsx)(n.code,{children:"geoprocessing/scripts/data/out"})," folder. A number of e2e tests in the scripts folder use this such as ",(0,t.jsx)(n.code,{children:"precalcVectorDatasource.test.ts"})," and ",(0,t.jsx)(n.code,{children:"precalcRasterDatasource.test.ts"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"e2e-test-data-on-port-8080",children:"E2E test data on port 8080"}),"\n",(0,t.jsx)(n.p,{children:"Test commands that include the e2e test group all start a web server on localhost port 8080 (see packages/geoprocessing/package.json)."}),"\n",(0,t.jsx)(n.h2,{id:"geoprocessing-project-test-data-on-port-8080",children:"Geoprocessing project test data on port 8080"}),"\n",(0,t.jsx)(n.p,{children:"Be aware that geoprocessing projects also have a start-data command and they all use 8080 by default, but fallback to another port if 8080 isn't available without telling you. so your tests may unexpectedly fail with network connection errors, or seemingly more vague errors about \"block size\" for a Cloud-optimized Geotiff. Just make sure you have a web server started and that you aren't running more than one. Check other vscode windows for shells running start-data and kill them."}),"\n",(0,t.jsxs)(n.p,{children:["If you want to run a test command that lets you match on a test name like ",(0,t.jsx)(n.code,{children:"test:scripts:e2e:matching"}),", then you'll need to start your own web server using the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run start-data\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you use the VSCode launcher to debug tests you will also need to manually start a web server as it will not auto-start them. Again look for connection or block size errors as a clue."}),"\n",(0,t.jsxs)(n.p,{children:["You can alway open a browser and navigate to ",(0,t.jsx)(n.code,{children:"http://127.0.0.1:8080"})," and see if you get back a file directory with the files you expect!"]}),"\n",(0,t.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.p,{children:["The geoprocessing library provides VSCode debug launchers for its test suites, templates and translation machinery. With the geoprocessing repo checked out and open in VSCode, just add a breakpoint or a ",(0,t.jsx)(n.code,{children:"debugger"})," call in one of the core tests, click the ",(0,t.jsx)(n.code,{children:"Debug"})," menu in the left toolbar (picture of a bug) and select the appropriate package. The debugger should break at the appropriate place."]}),"\n",(0,t.jsx)(n.h3,{id:"debugging-functions",children:"Debugging Functions"}),"\n",(0,t.jsx)(n.p,{children:"As you build report functions, using console logging or inspecting with a VSCode debugger may not be enough. You may want to make sure the output is properly formatted JSON/GeoJSON, or looks appropriate on a map, or try using the file in another software library. Here's a simple workflow that can make this easier:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Write a unit test that calls your function"}),"\n",(0,t.jsxs)(n.li,{children:["In your function, use the ",(0,t.jsx)(n.code,{children:"toJsonFile"})," helper to write out any Javascript object to a nicely formatted file."]}),"\n",(0,t.jsxs)(n.li,{children:["If you output a ",(0,t.jsx)(n.code,{children:".geojson"})," file you can open it in vscode, check for errors, and view it using the Map Preview extension."]}),"\n",(0,t.jsx)(n.li,{children:"Make any necessary changes to your code and run the test again to regenerate the files."}),"\n",(0,t.jsx)(n.li,{children:"Clean up your temporary files when done"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"storybook-components",children:"Storybook components"}),"\n",(0,t.jsxs)(n.p,{children:["The framework has it's own storybook project that can be launched using ",(0,t.jsx)(n.code,{children:"npm run storybook"}),". These components and their stories can be found under ",(0,t.jsx)(n.code,{children:"packages/geoprocessing/src/components/"}),". As common ui patterns are developed the intention is to create a library of useful components with good documentation that report authors can use."]}),"\n",(0,t.jsx)(n.h2,{id:"make-and-test-modifications",children:"Make and Test Modifications"}),"\n",(0,t.jsx)(n.p,{children:"Making changes to geoprocessing UI components, toolbox functions, and utilities can be pretty straightforward. Everything is handled within the library before committing."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Make the necessary code changes"}),"\n",(0,t.jsx)(n.li,{children:"Write unit tests that demonstrate its proper behavior"}),"\n",(0,t.jsx)(n.li,{children:"Make sure you export your work up to the top-level for library users to be able import it"}),"\n",(0,t.jsx)(n.li,{children:"Publish a new version of the library"}),"\n",(0,t.jsx)(n.li,{children:"Update your existing geoprocessing project to use the new version"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Making changes to framework CLI commands for example such as ",(0,t.jsx)(n.code,{children:"init"}),", ",(0,t.jsx)(n.code,{children:"build"}),", ",(0,t.jsx)(n.code,{children:"import"})," and ",(0,t.jsx)(n.code,{children:"deploy"}),", etc. can be more involved because to fully test it you need to bundle and often publish a new or experimental version of the geoprocessing library and then manually test it directly. A good methodology is to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create unit or end-to-end tests in the geoprocessing framework for functions behind the CLI command"}),"\n",(0,t.jsx)(n.li,{children:"Create unit or end-to-end tests in templates (template-blank-project, template-ocean-eez). Consider that users will also then get these tests when they install the template."}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"npm run prepare"})," from the ",(0,t.jsx)(n.code,{children:"packages/geoprocessing"})," folder to do a build into the ",(0,t.jsx)(n.code,{children:"packages/geoprocessing/dist"})," folder, which includes the CLI commands."]}),"\n",(0,t.jsxs)(n.li,{children:["To test the ",(0,t.jsx)(n.code,{children:"init"})," commands, in your terminal you'll need to ",(0,t.jsx)(n.code,{children:"cd"})," to the ",(0,t.jsx)(n.code,{children:"packages"})," directory alongside ",(0,t.jsx)(n.code,{children:"geoprocessing"}),". Then run the following and be sure to cleanup when you're done with testing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"node node_modules/@seasketch/geoprocessing/dist/scripts/init/init.js"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["You can then test all the other CLI commands on this initialized proejct, or one of the existing sibling packages (base-project, template-ocean-eez, template-blank-project). Just ",(0,t.jsx)(n.code,{children:"cd"})," into the sibling package, say ",(0,t.jsx)(n.code,{children:"packages/base-project"}),", then run one of the following and be sure to cleanup when you're done with testing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"node node_modules/@seasketch/geoprocessing/dist/scripts/init/createClient.js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"node node_modules/@seasketch/geoprocessing/dist/scripts/init/createReport.js"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Once you've done everything that you can locally, you can publish an alpha or ",(0,t.jsx)(n.a,{href:"#experimental-releases",children:"experimental"})," release of geoprocessing library and ",(0,t.jsx)(n.a,{href:"#project-init-with-non-latest-version",children:"init"})," a project with it, or update an existing project to use the new version (via package.json version)."]}),"\n",(0,t.jsxs)(n.li,{children:["If you want to avoid publishing, you can create an ",(0,t.jsx)(n.a,{href:"#init-example-project",children:"example project"})," in the geoprocessing folder and then deploy it. You can then plug it into a SeaSketch sketch class and test using it, or run a ",(0,t.jsx)(n.a,{href:"#running-local-client-dev-server",children:"local client dev server"})," if you want to debug your report clients more directly outside of an iframe."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"init-example-project",children:"Init example project"}),"\n",(0,t.jsx)(n.p,{children:"This will run the project init function directly from your library build. When you run it, call your project something lik example-project-[insert some unique word] to avoid collisions with any other projects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd /PATH/TO/geoprocessing\nnpm install # make sure all installed, and prepre is run doing a build\ncd packages\nnode geoprocessing/dist/scripts/init/init.js # follow the tutorial if needed\nnpm install\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Upon running install, as long as your version of geoprocessing in your example projects package.json matches the current version in ",(0,t.jsx)(n.code,{children:"packages/geoprocess/package/json"})," then lerna will symlink your example project to use the sibline geoprocessing folder for its dependency. You can confirm the symlink is in place with ",(0,t.jsx)(n.code,{children:"ls -al packages/geoprocess/node_modules/@seasketch"}),". If it's not then check your geoprocessing version, and run ",(0,t.jsx)(n.code,{children:"npm install"})," again after changing."]}),"\n",(0,t.jsx)(n.p,{children:"Now follow the tutorial to generate example sketches/features, run smoke tests, build, and deploy this project. If you deploy your stack, you can then import datasources, plug it into seasketch, etc."}),"\n",(0,t.jsx)(n.h4,{id:"testing-cli-commands",children:"Testing CLI commands"}),"\n",(0,t.jsxs)(n.p,{children:["You can also now do additional development in geoprocessing, such as to CLI commands, and test them with your example project. Just make sure to you run ",(0,t.jsx)(n.code,{children:"npm run prepare"})," in your geoprocessing folder first to transpile and bundle everything to dist (which is where project CLI commands run code from), or use ",(0,t.jsx)(n.code,{children:"npm run watch"})," if your changes are limited to src folder, or ",(0,t.jsx)(n.code,{children:"npm run watch:scripts"})," if your changes are limited to scripts folder. This can speed up your development loop."]}),"\n",(0,t.jsx)(n.h4,{id:"testing-report-clients",children:"Testing Report Clients"}),"\n",(0,t.jsx)(n.p,{children:"If you've deployed your example project, and you want to do some testing/debugging of your report clients more directly against it (outside of a seasketch iframe), you can run a local client dev server (see next section)."}),"\n",(0,t.jsx)(n.p,{children:"Once you're done with your example project don't forget to cleanup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run destroy\ncd ..\nrm -rf example-project-foo\n"})}),"\n",(0,t.jsx)(n.h3,{id:"running-local-client-dev-server",children:"Running local client dev server"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes running report clients in storybook isn't enough. You might be debugging or making changes to the underlying client infrastructure, and need a faster development cycle than deploying every change to AWS first."}),"\n",(0,t.jsxs)(n.p,{children:["You can serve up all of your report clients locally, straight out of your ",(0,t.jsx)(n.code,{children:".build-web"})," folder. You just need to have a geoprocessing stack already deployed with all of the geoprocessing functions in place that your report clients expect. Just follow these steps:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Make any edits you want to your report client\nnpm run build:client\nnpm run start:client\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Browse to ",(0,t.jsx)(n.code,{children:"http://localhost:8080/?service=SERVICE_URL"})," where SERVICE_URL is the URL of your deployed geoprocessing projects Rest API endpoint. An example is ",(0,t.jsx)(n.code,{children:"http://localhost:8080/?service=https://bhxn1rmxf5.execute-api.us-west-1.amazonaws.com/prod/"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This would load the report client app, which will fetch the service manifest from the service URL. The client app is now ready for you to send it a message using the ",(0,t.jsx)(n.code,{children:"postMessage"})," API, the same API that seasketch uses to send messages to the report client app it runs in an iframe."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'window.postMessage({\n  type: "SeaSketchReportingMessageEventType",\n  client: "MpaTabReport",\n  language: "en",\n  geometryUri: "https://legacy.seasketch.org/geojson/625a657273095115bb25e275",\n  sketchProperties: {\n    id: "625a657273095115bb25e275",\n    name: "Azores Test Sketch",\n    createdAt: "2021-04-20T20:28:03.607Z",\n    updatedAt: "2021-04-20T20:28:03.607Z",\n    sketchClassId: "615b65a2aac8c8285d50d9f3",\n    isCollection: false,\n    userAttributes: [],\n    visibleLayers: [],\n  },\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"The parameters you may want to change include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"client"})," - MpaTabReport is the default client published by the ocean EEZ template. You might have your own report client name. Check your geoprocessing.json or browse to the service URL and look at the list of available clients."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"language"})," - en or English is the default. You can choose any supported language, for example ",(0,t.jsx)(n.code,{children:"pt"})," for Portuguese."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"geometryUri"})," - this is the URL that report clients will give to geoprocessing functions to load the sketch from to operate on. Change it to any valid sketch URL."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchProperties"})," - these are the sketch properties that seasketch would normally pass to the report client. You can override these however you want, which you will need to if you have report clients that require or change their behavior depending on sketch attributes present."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"test-local-gp-project-against-local-geoprocessing",children:"Test local gp project against local geoprocessing"}),"\n",(0,t.jsxs)(n.p,{children:["To test with projects other than ",(0,t.jsx)(n.code,{children:"example-project"})," on your local machine, npm link is a handy tool. From within ",(0,t.jsx)(n.code,{children:"packages/geoprocessing"})," run the command ",(0,t.jsx)(n.code,{children:"npm link"}),". This will make the library available to other packages locally (assuming the same version of node. watch out nvm users!). Then change to you project directory and run ",(0,t.jsx)(n.code,{children:"npm link @seasketch/geoprocessing"}),". Any changes you make to the library will automatically be reflected in your geoprocessing implementation. Just watch out for a couple common problems:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Make sure VSCode is running the two build processes, and they complete without errors. Implementations import code from ",(0,t.jsx)(n.code,{children:"dist/"}),", not the source typescript files."]}),"\n",(0,t.jsxs)(n.li,{children:["Running npm install within your geoprocessing project can interact oddly with npm link and produce errors. If you suspect problems redo the linking process again after all your installs. You will need to run ",(0,t.jsx)(n.code,{children:"npm unlink @seasketch/geoprocessing --no-save"})," in your project directory. You can then try and relink."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Further link troubleshooting steps:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If still issue you can fully unlink and relink the geoprocessing project as a global npm package. ",(0,t.jsx)(n.code,{children:"npm unlink @seasketch/geoprocessing"})," in the geoprocessing package. If you run ",(0,t.jsx)(n.code,{children:"npm list -g --depth 0"})," and still see the geoprocessing package globally then also run ",(0,t.jsx)(n.code,{children:"npm unlink -g @seasketch/geoprocessing"}),". Now follow the complete steps again to relink."]}),"\n",(0,t.jsxs)(n.li,{children:["If still issue, then consider also deleting your ",(0,t.jsx)(n.code,{children:"node_modules"})," directory and ",(0,t.jsx)(n.code,{children:"package-lock.json"})," file in your project directory to start fresh as they may have been put into an incosistent state by the linking."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"publishing",children:"Publishing"}),"\n",(0,t.jsxs)(n.p,{children:["New stable releases of the framework are published from the ",(0,t.jsx)(n.code,{children:"main"})," branch. To do this:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Make sure the ",(0,t.jsx)(n.code,{children:"main"})," branch has the latest code. Open a pull request from the ",(0,t.jsx)(n.code,{children:"dev"})," branch if needed."]}),"\n",(0,t.jsxs)(n.li,{children:["Update Changelog.md - using the commit log as a guide. If breaking changes, then you'll need to release a new major version. (e.g. 2.0.0 -> 3.0.0), otherwise a new minor version is typically fine. See ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"semantic versioning conventions"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Publish","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"npm run publish:stable"})}),"\n",(0,t.jsx)(n.li,{children:"Choose the version number that matches what you put into the Changelog."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["By default, a stable release will be tagged as ",(0,t.jsx)(n.code,{children:"latest"})," so that users installing from npm will get it by default."]}),"\n",(0,t.jsxs)(n.p,{children:["Please follow ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"semantic versioning conventions"}),". This will generate new build artifacts in the ",(0,t.jsx)(n.code,{children:"dist"})," folder first using the ",(0,t.jsx)(n.code,{children:"prepare"})," script."]}),"\n",(0,t.jsx)(n.h2,{id:"alpha-and-beta-canary-releases",children:"Alpha and Beta Canary Releases"}),"\n",(0,t.jsxs)(n.p,{children:["You can also publish ",(0,t.jsx)(n.code,{children:"alpha"})," or ",(0,t.jsx)(n.code,{children:"beta"})," canary releases out-of-band to quickly test new features and publish them, without bumping the version number. These releases are not tagged as ",(0,t.jsx)(n.code,{children:"latest"}),", so they aren't installed unless a user targets them specifically. Make sure that you create them from the dev branch."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm run publish:alpha:canary\nnpm run publish:beta:canary\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Assuming the current GP version is say 0.15.0, and you've made 5 commits to the dev branch since the last release, this should publish a minor canary release called ",(0,t.jsx)(n.code,{children:"0.15.1-alpha.5"})," or ",(0,t.jsx)(n.code,{children:"0.15.1-beta.5"}),". As you push more commits to the dev branch, you can publish again at any time and the commit number will increment so that there isn't a name collision."]}),"\n",(0,t.jsx)(n.h2,{id:"experimental-releases",children:"Experimental Releases"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to work on a feature outside of dev in a feature branch, and publish it and test it, you can publish it as an ",(0,t.jsx)(n.code,{children:"experiment"}),". Make sure that you publish it from a feature branch, typically with the same name you will give your experiment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm run publish:experimental:canary\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Assuming your branch name is ",(0,t.jsx)(n.code,{children:"node16-webpack5"}),", the current GP version is 0.15.0, and your feature branch is 28 commits ahead of the last release tag, this should publish a minor release called ",(0,t.jsx)(n.code,{children:"0.15.1-experimental-node16-webpack5.28"}),". As you push more commits to your experimental branch, you can publish again at any time and the commit number will increment so that there isn't a name collision."]}),"\n",(0,t.jsx)(n.h2,{id:"project-init-with-non-latest-version",children:"Project init with non-latest version"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to test running a project ",(0,t.jsx)(n.code,{children:"init"}),", using something other than the ",(0,t.jsx)(n.code,{children:"latest"})," version published to NPM, you just need to provide the explicit version. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npx @seasketch/geoprocessing@0.15.1-beta.1 init 0.15.1-beta.1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"wiki",children:"Wiki"}),"\n",(0,t.jsxs)(n.p,{children:["Diagrams are maintained in internal SeaSketch ",(0,t.jsx)(n.a,{href:"https://drive.google.com/drive/folders/1JL7BkOf2mP2VaXQKlM2kkENqHW9LtCbm?usp=sharing",children:"drive share"})]}),"\n",(0,t.jsx)(n.h2,{id:"i18n",children:"i18n"}),"\n",(0,t.jsxs)(n.p,{children:["Localization is managed using ",(0,t.jsx)(n.a,{href:"https://react.i18next.com/",children:"i18next"}),". Wrap ",(0,t.jsx)(n.em,{children:"all"})," strings displayed in report client UIs in appropriate tags so they can be translated into multiple languages. ESLint rules will flag missing tags."]}),"\n",(0,t.jsxs)(n.p,{children:["We're using a ",(0,t.jsx)(n.a,{href:"https://poeditor.com/join/project?hash=juloLqMZDP",children:"public POEditor project"})," to manage translations. Local npm scripts exist to publish new terms to this project and extract translations into the ",(0,t.jsx)(n.code,{children:"packages/i18n"})," directory. Run ",(0,t.jsx)(n.code,{children:"npm run translation:sync"})," to perform these operations. It is important to do this regularly. The CI system will build a newly updated clients, but will only include new translations if this step is performed and changes are checked in."]}),"\n",(0,t.jsx)(n.h3,{id:"i18n-namespaces",children:"i18n namespaces"}),"\n",(0,t.jsxs)(n.p,{children:["Terms are organized into ",(0,t.jsx)(n.a,{href:"https://react.i18next.com/guides/multiple-translation-files",children:"namespaces"}),", each with their own translation file."]}),"\n",(0,t.jsxs)(n.p,{children:["To add new namespaces as new features are launched, edit ",(0,t.jsx)(n.code,{children:"packages/i18n/namespaces.json"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"adding-new-languages",children:"Adding new languages"}),"\n",(0,t.jsxs)(n.p,{children:["To add new supported languages, add required metadata to ",(0,t.jsx)(n.code,{children:"packages/i18n/supported.ts"}),". You will also need to add a matching entry to the POEditor project using their GUI."]}),"\n",(0,t.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsxs)(n.p,{children:["translation",":extract"," - extract translations from code to ",(0,t.jsx)(n.code,{children:"packages/i18n/lang/en"})," using babel and i18next-extract plugin\ntranslation",":publish"," - publish term namespaces to poeditor, updating existing terms and adding new terms\ntranslation",":import"," - download poeditor translated terms to local cache in ",(0,t.jsx)(n.code,{children:"packages/i18n/lang"})]}),"\n",(0,t.jsxs)(n.p,{children:["translation",":sync"," - runs both extract/publish and import to sync local with poeditor"]}),"\n",(0,t.jsx)(n.p,{children:"POEDITOR_PROJECT and POEDITOR_API_TOKEN environment variables must be pre-loaded in your shell environment to publish and import from poeditor.com."}),"\n",(0,t.jsx)(n.p,{children:"OPTION 1 - packages/i18n"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"publish it as @seasketch/geoprocessing-i18n"}),"\n",(0,t.jsx)(n.li,{children:"translations are stored within the published package"}),"\n",(0,t.jsx)(n.li,{children:"on project init, translations are copied from i18n directory to project space"}),"\n",(0,t.jsx)(n.li,{children:"project report client imports i18n.ts file from i18n lib"}),"\n",(0,t.jsx)(n.li,{children:"geoprocessing and template packages can import the sibling i18n package and import i18n.ts the same way."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"pros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"sibling packages import from @seasketch/geoprocessing-i18n"}),"\n",(0,t.jsx)(n.li,{children:"i18n package is independent of geoprocessing package on npm and could potentially be upgraded independently by a project."}),"\n",(0,t.jsxs)(n.li,{children:["translation",":upgrade"," - bump the i18n package version and ",(0,t.jsx)(n.code,{children:"translation:upgrade"})," bin script in project space will merge the updates. A function could be provided within i18n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"cons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"have to transpile and publish a separate package from geoprocessing. But that opens the door to breaking down the gp monolith. Opportunity to use esm module?"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"OPTION 2 - geoprocessing/src/i18n"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"store translations and related code in geoprocessing package"}),"\n",(0,t.jsx)(n.li,{children:"monorepo root calls"}),"\n",(0,t.jsx)(n.li,{children:"bundle lang json files just like templates into build"}),"\n",(0,t.jsx)(n.li,{children:"projects and sibling template packages will import i18n init from @seasketch/geoprocessing/i18n entry point (similar to dataproviders)\non project init, generate i18n directory in project space, copy the lang assets out."}),"\n",(0,t.jsx)(n.li,{children:"each project/template will have its own translate CLI commands."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"creating-core-translations",children:"Creating core translations"}),"\n",(0,t.jsx)(n.p,{children:"babel - with babelrc, uses i18n-extract to bundle translations, which can be served to the client."}),"\n",(0,t.jsxs)(n.p,{children:["Namespaces is ",(0,t.jsx)(n.code,{children:"core"})," and combines:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"geoprocessing (src/components, src/rbcs/components, src/iucn/)"}),"\n",(0,t.jsx)(n.li,{children:"template-blank-project"}),"\n",(0,t.jsx)(n.li,{children:"template-ocean-eez"}),"\n",(0,t.jsx)(n.li,{children:"template-addon-* (future packages)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"creating-gp-project-translations",children:"Creating gp project translations"}),"\n",(0,t.jsx)(n.h3,{id:"loading-project-translations",children:"Loading project translations"}),"\n",(0,t.jsx)(n.p,{children:"i18n.ts is used to detect the current language and load the translations from teh backend"}),"\n",(0,t.jsx)(n.p,{children:"Load core translations\nLoad project translations\nMerge them?"}),"\n",(0,t.jsx)(n.h3,{id:"questions",children:"Questions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Should we use SeaSketch Next project for gp and gp project translations? Yes I think so in order to have centrally managed translator access"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Yes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Should translation machinery be kept in a monorepo package that works across all packages to pull together and merge translations?"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"how does translation loading work on client side?"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"load should happen in top level of report client, so that it can load project specific translations, which may override core translations."}),"\n",(0,t.jsxs)(n.p,{children:["Report developer should not have to deal with this. Perhaps move ReportPage out of client-ui as Should be built-in or part of template-blank-project report client, and create",":function"," client."]}),"\n",(0,t.jsx)(n.p,{children:"Answers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["what to do with big chunks of text with html sprinkled in? such as used in learn more section of reports?","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["it looks like you can wrap text that includes html tags into ",(0,t.jsx)(n.code,{children:"<Trans/>"})," component"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"problems",children:"Problems"}),"\n",(0,t.jsxs)(n.p,{children:["each report client is loading i18n.ts on startup in storybook causing collision\nSimilar issue and suggestion to use createInstance - ",(0,t.jsx)(n.a,{href:"https://github.com/i18next/react-i18next/issues/1234",children:"https://github.com/i18next/react-i18next/issues/1234"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);