"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57986],{47599:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=s(74848),n=s(28453);const i={},c="rasterMetrics()",a={id:"api/geoprocessing/functions/rasterMetrics",title:"rasterMetrics()",description:"Calculates summary metrics (stats/area) on given raster, optionally intersecting raster with provided feature (zonal statistics).",source:"@site/docs/api/geoprocessing/functions/rasterMetrics.md",sourceDirName:"api/geoprocessing/functions",slug:"/api/geoprocessing/functions/rasterMetrics",permalink:"/geoprocessing/docs/next/api/geoprocessing/functions/rasterMetrics",draft:!1,unlisted:!1,editUrl:"https://github.com/seasketch/geoprocessing/tree/main/website/templates/shared/docs/api/geoprocessing/functions/rasterMetrics.md",tags:[],version:"current",frontMatter:{}},o={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"rastermetrics",children:"rasterMetrics()"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"function rasterMetrics(raster, options): Promise<Metric[]>\n"})}),"\n",(0,r.jsx)(t.p,{children:"Calculates summary metrics (stats/area) on given raster, optionally intersecting raster with provided feature (zonal statistics).\nIf feature is a collection, then calculate metrics for each individual feature as well as the collection as a whole.\nThis can be disabled with includeChildMetrics: false.  Defaults to assuming a continuous raster but also supports categorical option"}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Parameter"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"raster"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Georaster"})}),(0,r.jsx)(t.td,{children:"Cloud-optimized geotiff, loaded via loadCog or geoblaze.parse()"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"options"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"/geoprocessing/docs/next/api/geoprocessing/interfaces/OverlapRasterOptions",children:(0,r.jsx)(t.code,{children:"OverlapRasterOptions"})})}),(0,r.jsx)(t.td,{children:"-"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Promise"}),"<",(0,r.jsx)(t.a,{href:"/geoprocessing/docs/next/api/geoprocessing/type-aliases/Metric",children:(0,r.jsx)(t.code,{children:"Metric"})}),"[]>"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>a});var r=s(96540);const n={},i=r.createContext(n);function c(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);